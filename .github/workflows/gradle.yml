# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: dangeek
  CODE_DEPLOY_APP_NAME: Dangeek
  CODE_DEPLOY_GROUP_NAME: Dangeek-group
  
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Grant excute permission
      run: chmod +x ./gradlew
      shell: bash
        
    - name: Build with gradle 
      run: ./gradlew build --no-daemon -x test


    # 프로젝트 압축
    - name: Make zip file
      run: zip -r ./dangeek.zip .
      shell: bash
   
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1	
      with: 
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_PRIVATE_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # 압축한 프로젝트를 S3로 전송
    - name: Upload to S3
      run: aws s3 cp --region ${{ env.AWS_REGION }} ./dangeek.zip s3://$S3_BUCKET_NAME/dangeek.zip  

    # 배포 그룹으로 애플리케이션 전송
    - name: Code Deploy
      run: | 
        aws deploy create-deployment \
        --application-name ${{ env.CODE_DEPLOY_APP_NAME }} \
        --deployment-config-name CodeDeployDefault.AllAtOnce \
        --deployment-group-name ${{ env.CODE_DEPLOY_GROUP_NAME }} \
        --file-exists-behavior OVERWRITE \
        --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=dangeek.zip  \
    
    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
